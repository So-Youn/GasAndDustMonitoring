<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.8.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적 리소스 연결 -->
	<resources mapping="/images/**"
		location="/WEB-INF/static/images/" />
	<resources mapping="/common/**"
		location="/WEB-INF/static/common/" />
	<resources mapping="/fonts/**"
		location="/WEB-INF/static/fonts/" />
	<resources location="/WEB-INF/upload/"
		mapping="/uploadImages/**" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"></beans:property>
	</beans:bean>
	<!-- tiles 설정 파일 -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- tiles 기반 viewResolver -->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView"></beans:property>
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>
	<!-- =================================== mybatis사용 ============================================= -->
	<!-- 1. connection관리를 담당하는 객체를 생성해준다 -->
	<beans:bean id="ds"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>
	<!-- 2. spring에서 mybatis의 핵심클래스인 SqlSession을 사용할 수 있도록 하기 위해서 생성 (sql문을 
		실행하기 위해서.) -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds" />
		<!-- 아래는 mybatis의 설정파일의 위치를 알려주는거 -->
		<beans:property name="configLocation"
			value="/WEB-INF/config/mybatis-config.xml" />
	</beans:bean>
	<!-- 3. mybatis의 핵심클래스를 등록 -->
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<beans:constructor-arg ref="sqlSessionFactory" />
	</beans:bean>
	<!-- mongodb 서버에 접속할 수 있도록 ip,port 명시 -->
	<mongo:mongo id="mongo" host="127.0.0.1" port="27017" />
	<!-- mongodb를 spring에서 접속 제어할 수 있는 클래스 등록 -->
	<beans:bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<beans:constructor-arg ref="mongo" />
		<beans:constructor-arg name="databaseName"
			value="SensorDB" />
	</beans:bean>
	<context:component-scan base-package="com.nbp" />
	<mongo:repositories base-package="com.nbp.temp"/>
	<mongo:repositories base-package="com.nbp.co"/>
	<mongo:repositories base-package="com.nbp.gas"/>


</beans:beans>
